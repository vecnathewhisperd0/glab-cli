lint:
  image: registry.gitlab.com/gitlab-org/gitlab-build-images:golangci-lint-alpine
  stage: test
  script:
    - FMT_CMD="gofmt -w ."
    - eval "$FMT_CMD"
    - |
      if ! git diff --ignore-submodules=dirty --exit-code; then
        echo "Some files are not formatted. Please format with \`$FMT_CMD\`"
        exit 1;
      fi
    - golangci-lint --version
    # Use default .golangci.yml file from the image if one is not present in the project root.
    - '[ -e .golangci.yml ] || cp /golangci/.golangci.yml .'
    # Write the code coverage report to gl-code-quality-report.json
    # remove `--issues-exit-code 0` or set to non-zero to fail the job if linting issues are detected
    - golangci-lint run --issues-exit-code 1 --out-format colored-line-number:stdout,code-climate:gl-code-quality-report.json
  allow_failure:
    exit_codes: 1
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
    paths:
      - gl-code-quality-report.json
